<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from mailutils/xml/schema/CRM/Mailutils/003-MailutilsSetting.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:c9ba62bfcf31866787020a4655dc67d3)
 */
use CRM_Mailutils_ExtensionUtil as E;

/**
 * Database access object for the MailutilsSetting entity.
 */
class CRM_Mailutils_DAO_MailutilsSetting extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_mailutils_setting';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique MailutilsSetting ID
   *
   * @var int
   */
  public $id;

  /**
   * FK to Mail Setting
   *
   * @var int
   */
  public $mail_setting_id;

  /**
   * Mailtuils Template for new messages
   *
   * @var int
   */
  public $mailutils_template_id;

  /**
   * SMTP Server
   *
   * @var string
   */
  public $smtp_server;

  /**
   * SMTP Port
   *
   * @var int
   */
  public $smtp_port;

  /**
   * SMTP Username
   *
   * @var string
   */
  public $smtp_username;

  /**
   * SMTP Password
   *
   * @var string
   */
  public $smtp_password;

  /**
   * Support Case Category
   *
   * @var int
   */
  public $support_case_category_id;

  /**
   * From Email Address
   *
   * @var int
   */
  public $from_email_address_id;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_mailutils_setting';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Mailutils Settings') : E::ts('Mailutils Setting');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'mail_setting_id', 'civicrm_mail_settings', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'mailutils_template_id', 'civicrm_mailutils_template', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique MailutilsSetting ID'),
          'required' => TRUE,
          'where' => 'civicrm_mailutils_setting.id',
          'table_name' => 'civicrm_mailutils_setting',
          'entity' => 'MailutilsSetting',
          'bao' => 'CRM_Mailutils_DAO_MailutilsSetting',
          'localizable' => 0,
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'mail_setting_id' => [
          'name' => 'mail_setting_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('FK to Mail Setting'),
          'required' => TRUE,
          'where' => 'civicrm_mailutils_setting.mail_setting_id',
          'table_name' => 'civicrm_mailutils_setting',
          'entity' => 'MailutilsSetting',
          'bao' => 'CRM_Mailutils_DAO_MailutilsSetting',
          'localizable' => 0,
          'FKClassName' => 'CRM_Core_DAO_MailSettings',
          'add' => NULL,
        ],
        'mailutils_template_id' => [
          'name' => 'mailutils_template_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Mailutils Template ID'),
          'description' => E::ts('Mailtuils Template for new messages'),
          'required' => FALSE,
          'where' => 'civicrm_mailutils_setting.mailutils_template_id',
          'table_name' => 'civicrm_mailutils_setting',
          'entity' => 'MailutilsSetting',
          'bao' => 'CRM_Mailutils_DAO_MailutilsSetting',
          'localizable' => 0,
          'FKClassName' => 'CRM_Mailutils_DAO_MailutilsTemplate',
          'add' => NULL,
        ],
        'smtp_server' => [
          'name' => 'smtp_server',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('SMTP Server'),
          'description' => E::ts('SMTP Server'),
          'required' => FALSE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_mailutils_setting.smtp_server',
          'table_name' => 'civicrm_mailutils_setting',
          'entity' => 'MailutilsSetting',
          'bao' => 'CRM_Mailutils_DAO_MailutilsSetting',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'smtp_port' => [
          'name' => 'smtp_port',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('SMTP Port'),
          'description' => E::ts('SMTP Port'),
          'required' => FALSE,
          'where' => 'civicrm_mailutils_setting.smtp_port',
          'table_name' => 'civicrm_mailutils_setting',
          'entity' => 'MailutilsSetting',
          'bao' => 'CRM_Mailutils_DAO_MailutilsSetting',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'smtp_username' => [
          'name' => 'smtp_username',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('SMTP Username'),
          'description' => E::ts('SMTP Username'),
          'required' => FALSE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_mailutils_setting.smtp_username',
          'table_name' => 'civicrm_mailutils_setting',
          'entity' => 'MailutilsSetting',
          'bao' => 'CRM_Mailutils_DAO_MailutilsSetting',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'smtp_password' => [
          'name' => 'smtp_password',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('SMTP Password'),
          'description' => E::ts('SMTP Password'),
          'required' => FALSE,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_mailutils_setting.smtp_password',
          'table_name' => 'civicrm_mailutils_setting',
          'entity' => 'MailutilsSetting',
          'bao' => 'CRM_Mailutils_DAO_MailutilsSetting',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'support_case_category_id' => [
          'name' => 'support_case_category_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Support Case Category'),
          'description' => E::ts('Support Case Category'),
          'required' => FALSE,
          'where' => 'civicrm_mailutils_setting.support_case_category_id',
          'table_name' => 'civicrm_mailutils_setting',
          'entity' => 'MailutilsSetting',
          'bao' => 'CRM_Mailutils_DAO_MailutilsSetting',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'support_case_category',
            'optionEditPath' => 'civicrm/admin/options/support_case_category',
          ],
          'add' => NULL,
        ],
        'from_email_address_id' => [
          'name' => 'from_email_address_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('From Email Address'),
          'description' => E::ts('From Email Address'),
          'required' => TRUE,
          'where' => 'civicrm_mailutils_setting.from_email_address_id',
          'table_name' => 'civicrm_mailutils_setting',
          'entity' => 'MailutilsSetting',
          'bao' => 'CRM_Mailutils_DAO_MailutilsSetting',
          'localizable' => 0,
          'html' => [
            'type' => 'Select',
          ],
          'pseudoconstant' => [
            'optionGroupName' => 'from_email_address',
            'optionEditPath' => 'civicrm/admin/options/from_email_address',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'mailutils_setting', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'mailutils_setting', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
